{"version":3,"sources":["Square.js","Winner.js","help.js","Board.js","Game.js","App.js","index.js"],"names":["Square","id","this","props","i","className","square","onClick","value","Component","Winner","console","log","style","display","showWinner","role","aria-label","fontSize","status","Help","handleShowHelp","decideWinner","squares","areas","length","a","b","c","countNull","forEach","squareValue","checkDraw","intialState","Array","fill","isNextX","winnerName","showHelp","Board","state","handleShowWinner","bind","handleClick","reset","setState","prevState","slice","winner","renderSquare","Game","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8dd1b470.chunk.js","sourcesContent":["/** @format */\n\nimport React, { Component } from 'react';\n\nclass Square extends Component {\n    render() {\n        return (\n            <button\n                id={`square__${this.props.i}`}\n                className={`square ${this.props.square}`}\n                onClick={() => this.props.onClick()}\n            >\n                <span className='symbole'>{this.props.value}</span>\n            </button>\n        );\n    }\n}\n\nexport default Square;\n","/** @format */\n\nimport React, { Fragment } from 'react';\n\nconst Winner = (props) => {\n    console.log(props);\n    return (\n        <Fragment>\n            {/* <!-- The Modal --> */}\n            <div id='myModal' className='modal' style={{ display: props.display }}>\n                {/* <!-- Modal content --> */}\n                <div className='modal-content'>\n                    <span className='close' onClick={props.showWinner}>\n                        &times;\n                    </span>\n                    <h1>\n                        <span role='img' aria-label='congratulation' style={{ fontSize: '100px' }}>\n                            &#127870;\n                        </span>\n                        <span role='img' aria-label='congratulation' style={{ fontSize: '100px' }}>\n                            &#127881;\n                        </span>\n                        <span role='img' aria-label='congratulation' style={{ fontSize: '100px' }}>\n                            &#127882;\n                        </span>\n                    </h1>\n                    <h1> {props.status} </h1>\n                </div>\n            </div>\n        </Fragment>\n    );\n};\n\nexport default Winner;\n","/** @format */\n\nimport React, { Fragment } from 'react';\n\nconst Help = (props) => {\n    return (\n        <Fragment>\n            {/* <!-- The Modal --> */}\n            <div id='myModal' className='modal' style={{ display: props.display }}>\n                {/* <!-- Modal content --> */}\n                <div className='modal-content'>\n                    <span className='close' onClick={props.handleShowHelp}>\n                        &times;\n                    </span>\n                    <h1>RULES FOR TIC-TAC-TOE</h1>\n                    <ol className='help-text'>\n                        <li> The game is played on a grid that's 3 squares by 3 squares.</li>\n                        <li>\n                            You are X, your friend (or the computer in this case) is O. Players take\n                            turns putting their marks in empty squares.\n                        </li>\n                        <li>\n                            The first player to get 3 of her marks in a row (up, down, across, or\n                            diagonally) is the winner.\n                        </li>\n                        <li>\n                            When all 9 squares are full, the game is over. If no player has 3 marks\n                            in a row, the game ends in a tie.\n                        </li>\n                    </ol>\n                    <h1>HOW CAN I WIN AT TIC-TAC-TOE?</h1>\n                    <p>\n                        To beat the computer (or at least tie), you need to make use of a little bit\n                        of strategy. Strategy means figuring out what you need to do to win. Part of\n                        your strategy is trying to figure out how to get three Xs in a row. The\n                        other part is trying to figure out how to stop the computer from getting\n                        three Os in a row. After you put an X in a square, you start looking ahead.\n                        Where's the best place for your next X? You look at the empty squares and\n                        decide which ones are good choicesâ€”which ones might let you make three Xs in\n                        a row. You also have to watch where the computer puts its O. That could\n                        change what you do next. If the computer gets two Os in a row, you have to\n                        put your next X in the last empty square in that row, or the computer will\n                        win. You are forced to play in a particular square or lose the game. If you\n                        always pay attention and look ahead, you'll never lose a game of\n                        Tic-Tac-Toe. You may not win, but at least you'll tie.\n                    </p>\n                    <h1> {props.status} </h1>\n                </div>\n            </div>\n        </Fragment>\n    );\n};\n\nexport default Help;\n","/** @format */\n\nimport React, { Component, Fragment } from 'react';\nimport Square from './Square';\nimport Winner from './Winner';\nimport Help from './help';\nfunction checkDraw(squares) {\n    let countNull = 9;\n\n    squares.forEach((squareValue) => {\n        if (squareValue !== null) {\n            countNull -= 1;\n        }\n    });\n    // console.log(countNull);\n    return countNull === 0 ? 'draw' : null;\n}\nfunction decideWinner(squares) {\n    let status = null;\n\n    const areas = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n\n    for (let i = 0; i < areas.length; i++) {\n        const [a, b, c] = areas[i];\n\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            status = squares[a];\n        }\n    }\n    if (status === null) {\n        const isDraw = checkDraw(squares);\n        status = isDraw !== null ? 'draw' : status;\n    }\n    return status;\n}\n\nconst intialState = {\n    squares: Array(9).fill(null),\n    isNextX: true,\n    showWinner: false,\n    winnerName: '',\n    showHelp: false,\n};\n\nclass Board extends Component {\n    constructor(props) {\n        super(props);\n        this.state = intialState;\n        this.handleShowWinner = this.handleShowWinner.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n        this.reset = this.reset.bind(this);\n        this.handleShowHelp = this.handleShowHelp.bind(this);\n    }\n    reset() {\n        this.setState(intialState);\n    }\n    handleShowWinner() {\n        this.setState(intialState);\n    }\n    handleShowHelp() {\n        this.setState((prevState) => ({ ...prevState, showHelp: !prevState.showHelp }));\n    }\n    handleClick(i) {\n        const squares = this.state.squares.slice();\n        if (decideWinner(squares) || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.isNextX ? 'X' : 'O';\n        this.setState({ squares: squares, isNextX: !this.state.isNextX });\n    }\n    renderSquare(i) {\n        return (\n            <Square\n                i={i}\n                square={this.state.isNextX ? 'squareX' : 'squareO'}\n                value={this.state.squares[i]}\n                onClick={() => this.handleClick(i)}\n            />\n        );\n    }\n    render() {\n        const winner = decideWinner(this.state.squares);\n        let status;\n        // console.log('from render -> winner', winner);\n        if (winner) {\n            status =\n                winner === 'draw'\n                    ? 'The Game End with Draw'\n                    : 'Congratulation To Winner  Mr/s. ' + winner;\n        } else {\n            status = 'Current player: ' + (this.state.isNextX ? 'X' : 'O');\n        }\n\n        return (\n            <Fragment>\n                {winner && (\n                    <Winner\n                        status={status}\n                        display={!this.state.showWinner ? 'block' : 'none'}\n                        showWinner={this.handleShowWinner}\n                    />\n                )}\n                <Help\n                    display={this.state.showHelp ? 'block' : 'none'}\n                    handleShowHelp={this.handleShowHelp}\n                />\n                <div className='status'>{status}</div>\n                <div className='button'>\n                    <button onClick={this.reset}> Reset </button>\n                    <button onClick={this.handleShowHelp}> Help </button>\n                </div>\n                <div className='container'>\n                    <div className='board__row'>\n                        {this.renderSquare(0)}\n                        {this.renderSquare(1)}\n                        {this.renderSquare(2)}\n                    </div>\n                    <div className='board__row'>\n                        {this.renderSquare(3)}\n                        {this.renderSquare(4)}\n                        {this.renderSquare(5)}\n                    </div>\n                    <div className='board__row'>\n                        {this.renderSquare(6)}\n                        {this.renderSquare(7)}\n                        {this.renderSquare(8)}\n                    </div>\n                </div>\n            </Fragment>\n        );\n    }\n}\n\nexport default Board;\n","/** @format */\n\nimport React, { Component, Fragment } from 'react';\nimport Board from './Board';\nclass Game extends Component {\n    render() {\n        return (\n            <Fragment>\n                <h1>TicTacToe</h1>\n                <Board />;\n            </Fragment>\n        );\n    }\n}\n\nexport default Game;\n","/** @format */\n\nimport React from 'react';\nimport Game from './Game';\n\n// const [board, setBoard] = useState(['', '', '', '', '', '', '', '', '']);\n\nfunction App() {\n    return <Game />;\n}\n\nexport default App;\n","/** @format */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}